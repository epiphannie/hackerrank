#!/bin/python3

# Warm Up 1
# import math
# import os
# import random
# import re
# import sys
#
# # Complete the sockMerchant function below.
# def sockMerchant(n, ar):
#     socks_dict = {}
#     for item in ar:
#         if item in socks_dict.keys():
#             count = socks_dict[item]
#             socks_dict[item] = count + 1
#         else:
#             socks_dict[item] = 1
#     print(socks_dict)
#     pairs = 0
#     for item in socks_dict:
#         pairs += int(socks_dict[item] / 2)
#     print(pairs)
#     return pairs
#
# if __name__ == '__main__':
#
#     n = 9
#     a = '10 20 20 10 10 30 50 10 20'
#
#     ar = list(map(int, a.rstrip().split()))
#
#     result = sockMerchant(n, ar)

# Warm Up 2
# import math
# import os
# import random
# import re
# import sys
#
# # Complete the jumpingOnClouds function below.
# def jumpingOnClouds(c):
#
#     jumps = 0
#     new_position = 0
#     while new_position < len(c)-1:
#         if (new_position + 2 < len(c)) and (c[new_position + 2] != 1):
#             jumps += 1
#             new_position += 2
#         else:
#             jumps += 1
#             new_position += 1
#     return jumps
#
# if __name__ == '__main__':
#
#     n = 6
#     ca = '0 0 0 1 0 0'
#     c = list(map(int, ca.rstrip().split()))
#
#     result = jumpingOnClouds(c)

#Warm Up 3
# import math
# import os
# import random
# import re
# import sys
#
# # Complete the repeatedString function below.
# def repeatedString(s, n):
#     a = 0
#     for letter in s:
#         if letter == 'a':
#             a += 1
#     whole_strings = int(n/len(s))
#     partial_strings = n % len(s)
#     partial_string = s[0:partial_strings]
#
#     total_a = whole_strings * a
#
#     for letter in partial_string:
#         if letter == 'a':
#             total_a += 1
#
#     return(total_a)
#
#
# if __name__ == '__main__':
#
#     s = 'aba'
#
#     n = 10
#
#     result = repeatedString(s, n)
#Warm Up 4
#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the countingValleys function below.
def countingValleys(n, s):
    current_position = 0
    enter_valley = False
    valleys= 0
    for step in s:
        if step == 'U':
            current_position += 1
            if enter_valley == True and current_position >=0:
                valleys += 1
                enter_valley = False
        else:
            current_position -= 1
            if current_position < 0:
                enter_valley = True
    return valleys

if __name__ == '__main__':

    n = 8

    s = 'UDDDUDUU'

    result = countingValleys(n, s)